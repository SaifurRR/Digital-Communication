clear all
clc
% First, we set up the network topology
% List of all nodes
nodes = [1 2 3 4 5 6];
% nubmer of nodes
N = length(nodes);
% edge cost matrix
% c(i,j) is the cost of edege from i to j
c = [0 1 inf 3 inf inf;
inf 0 5 1 6 inf;
inf inf 0 inf inf 3;
inf inf inf 0 3 inf;
inf inf inf inf 0 1;
inf inf inf inf inf 0];
% destination node
destination = 6;
% source node
source = 1;
% Then, initialize costs and next hops at t=1
% (note: matlab starts counting from 1)
% p(t,j) is cost from node j to destination at time t
p(1,1:N) = inf * ones(1,N); % cost of all paths to destination initilized
p(1,destination) = 0; % to inf, except cost from destination to destination
% h(t,j) is next hop on min-cost path from node j to destination at time t
h(1,:) = -1 * ones(1,N); % next hop on min-cost path initialized to inf, except

h(1,destination) = destination; % from destination to destination
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% iteratively display and update the distance vector of each node
v = [p(1,:);h(1,:)];
disp('Distance vector table:')
disp([ 't = 1 : ' num2str(v(:)')])
d=1; % use this to monitor convergence (set to zero at convergence)
t=1;
while d > 0
t = t+1
for i=1:N
    
m=inf;
hop=-1;
for j=i:N
if ((c(i,j)<inf) && (c(i,j)>0))
if j==1
m=c(i,j)+p(t-1,j);
p(t,i)=m;
hop=1;
end
x=c(i,j)+p(t-1,j);
if x<=m
m=x;
p(t,i)=m;
h(t,i)=j;
end


end
end
if(p(t,i)==inf)
h(t,i)=-1;
end
h(t,destination)=destination;
end
count=0;
for i=1:N
if p(t,i)== p(t-1,i)
count=count+1;
end
if count == N
d=0;
end
end
v = [p(t,:);h(t,:)];
disp(['t = ' num2str(t) ' : ' num2str(v(:)')])
end
reach=0;
%path=zeros(1,N)
path(1,1)=source
path(1,2)=v(2);
i=2;
while ~reach
    
    path(1,i+1)=v(path(1,i)*2);
if path(1,i+1)==destination
reach=1;
end
i=i+1;
end
paths=nonzeros(path);

disp(['min cost from source to destination: ' num2str(p(t,source))])
disp(['path :'])
paths